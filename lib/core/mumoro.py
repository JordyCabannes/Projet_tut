# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mumoro', [dirname(__file__)])
        except ImportError:
            import _mumoro
            return _mumoro
        if fp is not None:
            try:
                _mod = imp.load_module('_mumoro', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mumoro = swig_import_helper()
    del swig_import_helper
else:
    import _mumoro
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mumoro.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mumoro.SwigPyIterator_value(self)
    def incr(self, n=1): return _mumoro.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _mumoro.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mumoro.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mumoro.SwigPyIterator_equal(self, *args)
    def copy(self): return _mumoro.SwigPyIterator_copy(self)
    def next(self): return _mumoro.SwigPyIterator_next(self)
    def __next__(self): return _mumoro.SwigPyIterator___next__(self)
    def previous(self): return _mumoro.SwigPyIterator_previous(self)
    def advance(self, *args): return _mumoro.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mumoro.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mumoro.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mumoro.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mumoro.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mumoro.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mumoro.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mumoro.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class EdgeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeList, name)
    __repr__ = _swig_repr
    def iterator(self): return _mumoro.EdgeList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mumoro.EdgeList___nonzero__(self)
    def __bool__(self): return _mumoro.EdgeList___bool__(self)
    def __len__(self): return _mumoro.EdgeList___len__(self)
    def pop(self): return _mumoro.EdgeList_pop(self)
    def __getslice__(self, *args): return _mumoro.EdgeList___getslice__(self, *args)
    def __setslice__(self, *args): return _mumoro.EdgeList___setslice__(self, *args)
    def __delslice__(self, *args): return _mumoro.EdgeList___delslice__(self, *args)
    def __delitem__(self, *args): return _mumoro.EdgeList___delitem__(self, *args)
    def __getitem__(self, *args): return _mumoro.EdgeList___getitem__(self, *args)
    def __setitem__(self, *args): return _mumoro.EdgeList___setitem__(self, *args)
    def append(self, *args): return _mumoro.EdgeList_append(self, *args)
    def empty(self): return _mumoro.EdgeList_empty(self)
    def size(self): return _mumoro.EdgeList_size(self)
    def clear(self): return _mumoro.EdgeList_clear(self)
    def swap(self, *args): return _mumoro.EdgeList_swap(self, *args)
    def get_allocator(self): return _mumoro.EdgeList_get_allocator(self)
    def begin(self): return _mumoro.EdgeList_begin(self)
    def end(self): return _mumoro.EdgeList_end(self)
    def rbegin(self): return _mumoro.EdgeList_rbegin(self)
    def rend(self): return _mumoro.EdgeList_rend(self)
    def pop_back(self): return _mumoro.EdgeList_pop_back(self)
    def erase(self, *args): return _mumoro.EdgeList_erase(self, *args)
    def __init__(self, *args): 
        this = _mumoro.new_EdgeList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mumoro.EdgeList_push_back(self, *args)
    def front(self): return _mumoro.EdgeList_front(self)
    def back(self): return _mumoro.EdgeList_back(self)
    def assign(self, *args): return _mumoro.EdgeList_assign(self, *args)
    def resize(self, *args): return _mumoro.EdgeList_resize(self, *args)
    def insert(self, *args): return _mumoro.EdgeList_insert(self, *args)
    def pop_front(self): return _mumoro.EdgeList_pop_front(self)
    def push_front(self, *args): return _mumoro.EdgeList_push_front(self, *args)
    def reverse(self): return _mumoro.EdgeList_reverse(self)
    __swig_destroy__ = _mumoro.delete_EdgeList
    __del__ = lambda self : None;
EdgeList_swigregister = _mumoro.EdgeList_swigregister
EdgeList_swigregister(EdgeList)

Foot = _mumoro.Foot
Bike = _mumoro.Bike
Car = _mumoro.Car
PublicTransport = _mumoro.PublicTransport
FootEdge = _mumoro.FootEdge
BikeEdge = _mumoro.BikeEdge
CarEdge = _mumoro.CarEdge
SubwayEdge = _mumoro.SubwayEdge
BusEdge = _mumoro.BusEdge
TramEdge = _mumoro.TramEdge
TransferEdge = _mumoro.TransferEdge
UnknownEdgeType = _mumoro.UnknownEdgeType
WhateverEdge = _mumoro.WhateverEdge
ConstDur = _mumoro.ConstDur
TimetableDur = _mumoro.TimetableDur
FrequencyDur = _mumoro.FrequencyDur
NextDay = _mumoro.NextDay
PrevDay = _mumoro.PrevDay
class DurationPT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DurationPT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DurationPT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["const_duration"] = _mumoro.DurationPT_const_duration_set
    __swig_getmethods__["const_duration"] = _mumoro.DurationPT_const_duration_get
    if _newclass:const_duration = _swig_property(_mumoro.DurationPT_const_duration_get, _mumoro.DurationPT_const_duration_set)
    __swig_setmethods__["dur_type"] = _mumoro.DurationPT_dur_type_set
    __swig_getmethods__["dur_type"] = _mumoro.DurationPT_dur_type_get
    if _newclass:dur_type = _swig_property(_mumoro.DurationPT_dur_type_get, _mumoro.DurationPT_dur_type_set)
    def __init__(self, *args): 
        this = _mumoro.new_DurationPT(*args)
        try: self.this.append(this)
        except: self.this = this
    def append_timetable(self, *args): return _mumoro.DurationPT_append_timetable(self, *args)
    def append_frequency(self, *args): return _mumoro.DurationPT_append_frequency(self, *args)
    def sort(self): return _mumoro.DurationPT_sort(self)
    def set_min(self): return _mumoro.DurationPT_set_min(self)
    def __call__(self, *args): return _mumoro.DurationPT___call__(self, *args)
    def min_duration(self): return _mumoro.DurationPT_min_duration(self)
    __swig_destroy__ = _mumoro.delete_DurationPT
    __del__ = lambda self : None;
DurationPT_swigregister = _mumoro.DurationPT_swigregister
DurationPT_swigregister(DurationPT)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lon"] = _mumoro.Node_lon_set
    __swig_getmethods__["lon"] = _mumoro.Node_lon_get
    if _newclass:lon = _swig_property(_mumoro.Node_lon_get, _mumoro.Node_lon_set)
    __swig_setmethods__["lat"] = _mumoro.Node_lat_set
    __swig_getmethods__["lat"] = _mumoro.Node_lat_get
    if _newclass:lat = _swig_property(_mumoro.Node_lat_get, _mumoro.Node_lat_set)
    __swig_setmethods__["pick_up"] = _mumoro.Node_pick_up_set
    __swig_getmethods__["pick_up"] = _mumoro.Node_pick_up_get
    if _newclass:pick_up = _swig_property(_mumoro.Node_pick_up_get, _mumoro.Node_pick_up_set)
    def __init__(self): 
        this = _mumoro.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _mumoro.Node_swigregister
Node_swigregister(Node)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["road_edge"] = _mumoro.Edge_road_edge_set
    __swig_getmethods__["road_edge"] = _mumoro.Edge_road_edge_get
    if _newclass:road_edge = _swig_property(_mumoro.Edge_road_edge_get, _mumoro.Edge_road_edge_set)
    __swig_setmethods__["index"] = _mumoro.Edge_index_set
    __swig_getmethods__["index"] = _mumoro.Edge_index_get
    if _newclass:index = _swig_property(_mumoro.Edge_index_get, _mumoro.Edge_index_set)
    __swig_setmethods__["type"] = _mumoro.Edge_type_set
    __swig_getmethods__["type"] = _mumoro.Edge_type_get
    if _newclass:type = _swig_property(_mumoro.Edge_type_get, _mumoro.Edge_type_set)
    __swig_destroy__ = _mumoro.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _mumoro.Edge_swigregister
Edge_swigregister(Edge)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["g"] = _mumoro.Graph_g_set
    __swig_getmethods__["g"] = _mumoro.Graph_g_get
    if _newclass:g = _swig_property(_mumoro.Graph_g_get, _mumoro.Graph_g_set)
    def get_id(self): return _mumoro.Graph_get_id(self)
    def PickUpZone(self): return _mumoro.Graph_PickUpZone(self)
    def listEdges(self, *args): return _mumoro.Graph_listEdges(self, *args)
    def num_edges(self): return _mumoro.Graph_num_edges(self)
    def num_vertices(self): return _mumoro.Graph_num_vertices(self)
    def map(self, *args): return _mumoro.Graph_map(self, *args)
    def edgeIndex(self, *args): return _mumoro.Graph_edgeIndex(self, *args)
    def duration_forward(self, *args): return _mumoro.Graph_duration_forward(self, *args)
    def duration_backward(self, *args): return _mumoro.Graph_duration_backward(self, *args)
    def min_duration(self, *args): return _mumoro.Graph_min_duration(self, *args)
    def get_duration(self, *args): return _mumoro.Graph_get_duration(self, *args)
    def mapNode(self, *args): return _mumoro.Graph_mapNode(self, *args)
    def source(self, *args): return _mumoro.Graph_source(self, *args)
    def target(self, *args): return _mumoro.Graph_target(self, *args)
    def longitude(self, *args): return _mumoro.Graph_longitude(self, *args)
    def latitude(self, *args): return _mumoro.Graph_latitude(self, *args)
    def car_accessible(self, *args): return _mumoro.Graph_car_accessible(self, *args)
    def edge_descriptor(self, *args): return _mumoro.Graph_edge_descriptor(self, *args)
    __swig_destroy__ = _mumoro.delete_Graph
    __del__ = lambda self : None;
Graph_swigregister = _mumoro.Graph_swigregister
Graph_swigregister(Graph)

class VisualResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisualResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["edges"] = _mumoro.VisualResult_edges_set
    __swig_getmethods__["edges"] = _mumoro.VisualResult_edges_get
    if _newclass:edges = _swig_property(_mumoro.VisualResult_edges_get, _mumoro.VisualResult_edges_set)
    __swig_setmethods__["a_nodes"] = _mumoro.VisualResult_a_nodes_set
    __swig_getmethods__["a_nodes"] = _mumoro.VisualResult_a_nodes_get
    if _newclass:a_nodes = _swig_property(_mumoro.VisualResult_a_nodes_get, _mumoro.VisualResult_a_nodes_set)
    __swig_setmethods__["b_nodes"] = _mumoro.VisualResult_b_nodes_set
    __swig_getmethods__["b_nodes"] = _mumoro.VisualResult_b_nodes_get
    if _newclass:b_nodes = _swig_property(_mumoro.VisualResult_b_nodes_get, _mumoro.VisualResult_b_nodes_set)
    __swig_setmethods__["c_nodes"] = _mumoro.VisualResult_c_nodes_set
    __swig_getmethods__["c_nodes"] = _mumoro.VisualResult_c_nodes_get
    if _newclass:c_nodes = _swig_property(_mumoro.VisualResult_c_nodes_get, _mumoro.VisualResult_c_nodes_set)
    def __init__(self): 
        this = _mumoro.new_VisualResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_VisualResult
    __del__ = lambda self : None;
VisualResult_swigregister = _mumoro.VisualResult_swigregister
VisualResult_swigregister(VisualResult)

class NodeFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeFilter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mumoro.delete_NodeFilter
    __del__ = lambda self : None;
    def isIn(self, *args): return _mumoro.NodeFilter_isIn(self, *args)
    def visualization(self): return _mumoro.NodeFilter_visualization(self)
NodeFilter_swigregister = _mumoro.NodeFilter_swigregister
NodeFilter_swigregister(NodeFilter)

class BBNodeFilter(NodeFilter):
    __swig_setmethods__ = {}
    for _s in [NodeFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBNodeFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BBNodeFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_BBNodeFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def isIn(self, *args): return _mumoro.BBNodeFilter_isIn(self, *args)
    def visualization(self): return _mumoro.BBNodeFilter_visualization(self)
    __swig_destroy__ = _mumoro.delete_BBNodeFilter
    __del__ = lambda self : None;
BBNodeFilter_swigregister = _mumoro.BBNodeFilter_swigregister
BBNodeFilter_swigregister(BBNodeFilter)

class NodeSet(NodeFilter):
    __swig_setmethods__ = {}
    for _s in [NodeFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_NodeSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def isIn(self, *args): return _mumoro.NodeSet_isIn(self, *args)
    def addNode(self, *args): return _mumoro.NodeSet_addNode(self, *args)
    def add(self, *args): return _mumoro.NodeSet_add(self, *args)
    def visualization(self): return _mumoro.NodeSet_visualization(self)
    __swig_setmethods__["bitset"] = _mumoro.NodeSet_bitset_set
    __swig_getmethods__["bitset"] = _mumoro.NodeSet_bitset_get
    if _newclass:bitset = _swig_property(_mumoro.NodeSet_bitset_get, _mumoro.NodeSet_bitset_set)
    __swig_destroy__ = _mumoro.delete_NodeSet
    __del__ = lambda self : None;
NodeSet_swigregister = _mumoro.NodeSet_swigregister
NodeSet_swigregister(NodeSet)

class AcceptAllFilter(NodeFilter):
    __swig_setmethods__ = {}
    for _s in [NodeFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AcceptAllFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AcceptAllFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_AcceptAllFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_AcceptAllFilter
    __del__ = lambda self : None;
    def isIn(self, *args): return _mumoro.AcceptAllFilter_isIn(self, *args)
    def visualization(self): return _mumoro.AcceptAllFilter_visualization(self)
AcceptAllFilter_swigregister = _mumoro.AcceptAllFilter_swigregister
AcceptAllFilter_swigregister(AcceptAllFilter)


def cap_jj_nf(*args):
  return _mumoro.cap_jj_nf(*args)
cap_jj_nf = _mumoro.cap_jj_nf
class GraphFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_GraphFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_road_edge(self, *args): return _mumoro.GraphFactory_add_road_edge(self, *args)
    def add_public_transport_edge(self, *args): return _mumoro.GraphFactory_add_public_transport_edge(self, *args)
    def good(self, *args): return _mumoro.GraphFactory_good(self, *args)
    def set_coord(self, *args): return _mumoro.GraphFactory_set_coord(self, *args)
    def set_pickUp(self, *args): return _mumoro.GraphFactory_set_pickUp(self, *args)
    def setAll(self): return _mumoro.GraphFactory_setAll(self)
    def setAll2(self): return _mumoro.GraphFactory_setAll2(self)
    def getNode(self, *args): return _mumoro.GraphFactory_getNode(self, *args)
    def total_vertices(self): return _mumoro.GraphFactory_total_vertices(self)
    def set_id(self, *args): return _mumoro.GraphFactory_set_id(self, *args)
    def get(self): return _mumoro.GraphFactory_get(self)
    def save_to_bin(self, *args): return _mumoro.GraphFactory_save_to_bin(self, *args)
    def save_to_txt(self, *args): return _mumoro.GraphFactory_save_to_txt(self, *args)
    __swig_destroy__ = _mumoro.delete_GraphFactory
    __del__ = lambda self : None;
GraphFactory_swigregister = _mumoro.GraphFactory_swigregister
GraphFactory_swigregister(GraphFactory)

class DFA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DFA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_DFA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["start_state"] = _mumoro.DFA_start_state_set
    __swig_getmethods__["start_state"] = _mumoro.DFA_start_state_get
    if _newclass:start_state = _swig_property(_mumoro.DFA_start_state_get, _mumoro.DFA_start_state_set)
    __swig_setmethods__["accepting_states"] = _mumoro.DFA_accepting_states_set
    __swig_getmethods__["accepting_states"] = _mumoro.DFA_accepting_states_get
    if _newclass:accepting_states = _swig_property(_mumoro.DFA_accepting_states_get, _mumoro.DFA_accepting_states_set)
    __swig_setmethods__["graph"] = _mumoro.DFA_graph_set
    __swig_getmethods__["graph"] = _mumoro.DFA_graph_get
    if _newclass:graph = _swig_property(_mumoro.DFA_graph_get, _mumoro.DFA_graph_set)
    __swig_destroy__ = _mumoro.delete_DFA
    __del__ = lambda self : None;
DFA_swigregister = _mumoro.DFA_swigregister
DFA_swigregister(DFA)


def foot_subway_dfa():
  return _mumoro.foot_subway_dfa()
foot_subway_dfa = _mumoro.foot_subway_dfa

def bike_dfa():
  return _mumoro.bike_dfa()
bike_dfa = _mumoro.bike_dfa

def foot_dfa():
  return _mumoro.foot_dfa()
foot_dfa = _mumoro.foot_dfa

def car_dfa():
  return _mumoro.car_dfa()
car_dfa = _mumoro.car_dfa

def pt_foot_dfa():
  return _mumoro.pt_foot_dfa()
pt_foot_dfa = _mumoro.pt_foot_dfa

def pt_car_dfa():
  return _mumoro.pt_car_dfa()
pt_car_dfa = _mumoro.pt_car_dfa

def bike_pt_dfa():
  return _mumoro.bike_pt_dfa()
bike_pt_dfa = _mumoro.bike_pt_dfa

def pt_dfa():
  return _mumoro.pt_dfa()
pt_dfa = _mumoro.pt_dfa
class AbstractGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractGraph, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["forward"] = _mumoro.AbstractGraph_forward_get
    if _newclass:forward = _swig_property(_mumoro.AbstractGraph_forward_get)
    __swig_setmethods__["transport"] = _mumoro.AbstractGraph_transport_set
    __swig_getmethods__["transport"] = _mumoro.AbstractGraph_transport_get
    if _newclass:transport = _swig_property(_mumoro.AbstractGraph_transport_get, _mumoro.AbstractGraph_transport_set)
    __swig_destroy__ = _mumoro.delete_AbstractGraph
    __del__ = lambda self : None;
    def source(self, *args): return _mumoro.AbstractGraph_source(self, *args)
    def target(self, *args): return _mumoro.AbstractGraph_target(self, *args)
    def out_edges(self, *args): return _mumoro.AbstractGraph_out_edges(self, *args)
    def duration(self, *args): return _mumoro.AbstractGraph_duration(self, *args)
    def min_duration(self, *args): return _mumoro.AbstractGraph_min_duration(self, *args)
    def dfa_start_states(self): return _mumoro.AbstractGraph_dfa_start_states(self)
    def dfa_accepting_states(self): return _mumoro.AbstractGraph_dfa_accepting_states(self)
    def num_transport_vertices(self): return _mumoro.AbstractGraph_num_transport_vertices(self)
    def num_dfa_vertices(self): return _mumoro.AbstractGraph_num_dfa_vertices(self)
    def is_accepting(self, *args): return _mumoro.AbstractGraph_is_accepting(self, *args)
AbstractGraph_swigregister = _mumoro.AbstractGraph_swigregister
AbstractGraph_swigregister(AbstractGraph)

class RLC_Graph(AbstractGraph):
    __swig_setmethods__ = {}
    for _s in [AbstractGraph]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLC_Graph, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractGraph]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RLC_Graph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_RLC_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_RLC_Graph
    __del__ = lambda self : None;
    __swig_setmethods__["transport"] = _mumoro.RLC_Graph_transport_set
    __swig_getmethods__["transport"] = _mumoro.RLC_Graph_transport_get
    if _newclass:transport = _swig_property(_mumoro.RLC_Graph_transport_get, _mumoro.RLC_Graph_transport_set)
    __swig_setmethods__["dfa"] = _mumoro.RLC_Graph_dfa_set
    __swig_getmethods__["dfa"] = _mumoro.RLC_Graph_dfa_get
    if _newclass:dfa = _swig_property(_mumoro.RLC_Graph_dfa_get, _mumoro.RLC_Graph_dfa_set)
    def source(self, *args): return _mumoro.RLC_Graph_source(self, *args)
    def target(self, *args): return _mumoro.RLC_Graph_target(self, *args)
    def out_edges(self, *args): return _mumoro.RLC_Graph_out_edges(self, *args)
    def duration(self, *args): return _mumoro.RLC_Graph_duration(self, *args)
    def min_duration(self, *args): return _mumoro.RLC_Graph_min_duration(self, *args)
    def dfa_start_states(self): return _mumoro.RLC_Graph_dfa_start_states(self)
    def dfa_accepting_states(self): return _mumoro.RLC_Graph_dfa_accepting_states(self)
    def num_transport_vertices(self): return _mumoro.RLC_Graph_num_transport_vertices(self)
    def num_dfa_vertices(self): return _mumoro.RLC_Graph_num_dfa_vertices(self)
RLC_Graph_swigregister = _mumoro.RLC_Graph_swigregister
RLC_Graph_swigregister(RLC_Graph)

class BackwardGraph(AbstractGraph):
    __swig_setmethods__ = {}
    for _s in [AbstractGraph]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractGraph]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardGraph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["forward_graph"] = _mumoro.BackwardGraph_forward_graph_set
    __swig_getmethods__["forward_graph"] = _mumoro.BackwardGraph_forward_graph_get
    if _newclass:forward_graph = _swig_property(_mumoro.BackwardGraph_forward_graph_get, _mumoro.BackwardGraph_forward_graph_set)
    def __init__(self, *args): 
        this = _mumoro.new_BackwardGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_BackwardGraph
    __del__ = lambda self : None;
    def source(self, *args): return _mumoro.BackwardGraph_source(self, *args)
    def target(self, *args): return _mumoro.BackwardGraph_target(self, *args)
    def out_edges(self, *args): return _mumoro.BackwardGraph_out_edges(self, *args)
    def duration(self, *args): return _mumoro.BackwardGraph_duration(self, *args)
    def min_duration(self, *args): return _mumoro.BackwardGraph_min_duration(self, *args)
    def dfa_start_states(self): return _mumoro.BackwardGraph_dfa_start_states(self)
    def dfa_accepting_states(self): return _mumoro.BackwardGraph_dfa_accepting_states(self)
    def num_transport_vertices(self): return _mumoro.BackwardGraph_num_transport_vertices(self)
    def num_dfa_vertices(self): return _mumoro.BackwardGraph_num_dfa_vertices(self)
BackwardGraph_swigregister = _mumoro.BackwardGraph_swigregister
BackwardGraph_swigregister(BackwardGraph)

class Invalid_Operation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Invalid_Operation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Invalid_Operation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_Invalid_Operation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Invalid_Operation
    __del__ = lambda self : None;
Invalid_Operation_swigregister = _mumoro.Invalid_Operation_swigregister
Invalid_Operation_swigregister(Invalid_Operation)

class StateFreeNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateFreeNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateFreeNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_StateFreeNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["layer"] = _mumoro.StateFreeNode_layer_set
    __swig_getmethods__["layer"] = _mumoro.StateFreeNode_layer_get
    if _newclass:layer = _swig_property(_mumoro.StateFreeNode_layer_get, _mumoro.StateFreeNode_layer_set)
    __swig_setmethods__["vertex"] = _mumoro.StateFreeNode_vertex_set
    __swig_getmethods__["vertex"] = _mumoro.StateFreeNode_vertex_get
    if _newclass:vertex = _swig_property(_mumoro.StateFreeNode_vertex_get, _mumoro.StateFreeNode_vertex_set)
    __swig_destroy__ = _mumoro.delete_StateFreeNode
    __del__ = lambda self : None;
StateFreeNode_swigregister = _mumoro.StateFreeNode_swigregister
StateFreeNode_swigregister(StateFreeNode)

class CompleteNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompleteNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompleteNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_CompleteNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["layer"] = _mumoro.CompleteNode_layer_set
    __swig_getmethods__["layer"] = _mumoro.CompleteNode_layer_get
    if _newclass:layer = _swig_property(_mumoro.CompleteNode_layer_get, _mumoro.CompleteNode_layer_set)
    __swig_setmethods__["label"] = _mumoro.CompleteNode_label_set
    __swig_getmethods__["label"] = _mumoro.CompleteNode_label_get
    if _newclass:label = _swig_property(_mumoro.CompleteNode_label_get, _mumoro.CompleteNode_label_set)
    __swig_destroy__ = _mumoro.delete_CompleteNode
    __del__ = lambda self : None;
CompleteNode_swigregister = _mumoro.CompleteNode_swigregister
CompleteNode_swigregister(CompleteNode)

class Flag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dfa_state"] = _mumoro.Flag_dfa_state_set
    __swig_getmethods__["dfa_state"] = _mumoro.Flag_dfa_state_get
    if _newclass:dfa_state = _swig_property(_mumoro.Flag_dfa_state_get, _mumoro.Flag_dfa_state_set)
    __swig_setmethods__["arrival"] = _mumoro.Flag_arrival_set
    __swig_getmethods__["arrival"] = _mumoro.Flag_arrival_get
    if _newclass:arrival = _swig_property(_mumoro.Flag_arrival_get, _mumoro.Flag_arrival_set)
    __swig_setmethods__["cost"] = _mumoro.Flag_cost_set
    __swig_getmethods__["cost"] = _mumoro.Flag_cost_get
    if _newclass:cost = _swig_property(_mumoro.Flag_cost_get, _mumoro.Flag_cost_set)
    __swig_setmethods__["source"] = _mumoro.Flag_source_set
    __swig_getmethods__["source"] = _mumoro.Flag_source_get
    if _newclass:source = _swig_property(_mumoro.Flag_source_get, _mumoro.Flag_source_set)
    __swig_setmethods__["pred_layers"] = _mumoro.Flag_pred_layers_set
    __swig_getmethods__["pred_layers"] = _mumoro.Flag_pred_layers_get
    if _newclass:pred_layers = _swig_property(_mumoro.Flag_pred_layers_get, _mumoro.Flag_pred_layers_set)
    def __init__(self): 
        this = _mumoro.new_Flag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Flag
    __del__ = lambda self : None;
Flag_swigregister = _mumoro.Flag_swigregister
Flag_swigregister(Flag)

class MuparoParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuparoParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MuparoParams, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_MuparoParams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["transport"] = _mumoro.MuparoParams_transport_set
    __swig_getmethods__["transport"] = _mumoro.MuparoParams_transport_get
    if _newclass:transport = _swig_property(_mumoro.MuparoParams_transport_get, _mumoro.MuparoParams_transport_set)
    __swig_getmethods__["num_layers"] = _mumoro.MuparoParams_num_layers_get
    if _newclass:num_layers = _swig_property(_mumoro.MuparoParams_num_layers_get)
    __swig_destroy__ = _mumoro.delete_MuparoParams
    __del__ = lambda self : None;
MuparoParams_swigregister = _mumoro.MuparoParams_swigregister
MuparoParams_swigregister(MuparoParams)

DestNodes = _mumoro.DestNodes
Bidirectional = _mumoro.Bidirectional
Connection = _mumoro.Connection
class data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _mumoro.data_node_set
    __swig_getmethods__["node"] = _mumoro.data_node_get
    if _newclass:node = _swig_property(_mumoro.data_node_get, _mumoro.data_node_set)
    __swig_setmethods__["cost"] = _mumoro.data_cost_set
    __swig_getmethods__["cost"] = _mumoro.data_cost_get
    if _newclass:cost = _swig_property(_mumoro.data_cost_get, _mumoro.data_cost_set)
    def __init__(self): 
        this = _mumoro.new_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_data
    __del__ = lambda self : None;
data_swigregister = _mumoro.data_swigregister
data_swigregister(data)
cvar = _mumoro.cvar

class totalCost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, totalCost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, totalCost, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path_id"] = _mumoro.totalCost_path_id_set
    __swig_getmethods__["path_id"] = _mumoro.totalCost_path_id_get
    if _newclass:path_id = _swig_property(_mumoro.totalCost_path_id_get, _mumoro.totalCost_path_id_set)
    __swig_setmethods__["cost"] = _mumoro.totalCost_cost_set
    __swig_getmethods__["cost"] = _mumoro.totalCost_cost_get
    if _newclass:cost = _swig_property(_mumoro.totalCost_cost_get, _mumoro.totalCost_cost_set)
    def __init__(self): 
        this = _mumoro.new_totalCost()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_totalCost
    __del__ = lambda self : None;
totalCost_swigregister = _mumoro.totalCost_swigregister
totalCost_swigregister(totalCost)

class pref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mumoro.pref_id_set
    __swig_getmethods__["id"] = _mumoro.pref_id_get
    if _newclass:id = _swig_property(_mumoro.pref_id_get, _mumoro.pref_id_set)
    __swig_setmethods__["weight"] = _mumoro.pref_weight_set
    __swig_getmethods__["weight"] = _mumoro.pref_weight_get
    if _newclass:weight = _swig_property(_mumoro.pref_weight_get, _mumoro.pref_weight_set)
    def __eq__(self, *args): return _mumoro.pref___eq__(self, *args)
    def __init__(self): 
        this = _mumoro.new_pref()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_pref
    __del__ = lambda self : None;
pref_swigregister = _mumoro.pref_swigregister
pref_swigregister(pref)

class path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mumoro.path_id_set
    __swig_getmethods__["id"] = _mumoro.path_id_get
    if _newclass:id = _swig_property(_mumoro.path_id_get, _mumoro.path_id_set)
    __swig_setmethods__["start"] = _mumoro.path_start_set
    __swig_getmethods__["start"] = _mumoro.path_start_get
    if _newclass:start = _swig_property(_mumoro.path_start_get, _mumoro.path_start_set)
    __swig_setmethods__["end"] = _mumoro.path_end_set
    __swig_getmethods__["end"] = _mumoro.path_end_get
    if _newclass:end = _swig_property(_mumoro.path_end_get, _mumoro.path_end_set)
    __swig_setmethods__["cost"] = _mumoro.path_cost_set
    __swig_getmethods__["cost"] = _mumoro.path_cost_get
    if _newclass:cost = _swig_property(_mumoro.path_cost_get, _mumoro.path_cost_set)
    def __eq__(self, *args): return _mumoro.path___eq__(self, *args)
    def __init__(self): 
        this = _mumoro.new_path()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_path
    __del__ = lambda self : None;
path_swigregister = _mumoro.path_swigregister
path_swigregister(path)

class Test_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["synchro2_a"] = _mumoro.Test_config_synchro2_a_set
    __swig_getmethods__["synchro2_a"] = _mumoro.Test_config_synchro2_a_get
    if _newclass:synchro2_a = _swig_property(_mumoro.Test_config_synchro2_a_get, _mumoro.Test_config_synchro2_a_set)
    __swig_setmethods__["synchro2_b"] = _mumoro.Test_config_synchro2_b_set
    __swig_getmethods__["synchro2_b"] = _mumoro.Test_config_synchro2_b_get
    if _newclass:synchro2_b = _swig_property(_mumoro.Test_config_synchro2_b_get, _mumoro.Test_config_synchro2_b_set)
    __swig_setmethods__["car1_a"] = _mumoro.Test_config_car1_a_set
    __swig_getmethods__["car1_a"] = _mumoro.Test_config_car1_a_get
    if _newclass:car1_a = _swig_property(_mumoro.Test_config_car1_a_get, _mumoro.Test_config_car1_a_set)
    __swig_setmethods__["car1_b"] = _mumoro.Test_config_car1_b_set
    __swig_getmethods__["car1_b"] = _mumoro.Test_config_car1_b_get
    if _newclass:car1_b = _swig_property(_mumoro.Test_config_car1_b_get, _mumoro.Test_config_car1_b_set)
    __swig_setmethods__["foot1_a"] = _mumoro.Test_config_foot1_a_set
    __swig_getmethods__["foot1_a"] = _mumoro.Test_config_foot1_a_get
    if _newclass:foot1_a = _swig_property(_mumoro.Test_config_foot1_a_get, _mumoro.Test_config_foot1_a_set)
    __swig_setmethods__["foot1_b"] = _mumoro.Test_config_foot1_b_set
    __swig_getmethods__["foot1_b"] = _mumoro.Test_config_foot1_b_get
    if _newclass:foot1_b = _swig_property(_mumoro.Test_config_foot1_b_get, _mumoro.Test_config_foot1_b_set)
    __swig_setmethods__["car2_a"] = _mumoro.Test_config_car2_a_set
    __swig_getmethods__["car2_a"] = _mumoro.Test_config_car2_a_get
    if _newclass:car2_a = _swig_property(_mumoro.Test_config_car2_a_get, _mumoro.Test_config_car2_a_set)
    __swig_setmethods__["car2_b"] = _mumoro.Test_config_car2_b_set
    __swig_getmethods__["car2_b"] = _mumoro.Test_config_car2_b_get
    if _newclass:car2_b = _swig_property(_mumoro.Test_config_car2_b_get, _mumoro.Test_config_car2_b_set)
    __swig_setmethods__["foot2_a"] = _mumoro.Test_config_foot2_a_set
    __swig_getmethods__["foot2_a"] = _mumoro.Test_config_foot2_a_get
    if _newclass:foot2_a = _swig_property(_mumoro.Test_config_foot2_a_get, _mumoro.Test_config_foot2_a_set)
    __swig_setmethods__["foot2_b"] = _mumoro.Test_config_foot2_b_set
    __swig_getmethods__["foot2_b"] = _mumoro.Test_config_foot2_b_get
    if _newclass:foot2_b = _swig_property(_mumoro.Test_config_foot2_b_get, _mumoro.Test_config_foot2_b_set)
    __swig_setmethods__["time_car"] = _mumoro.Test_config_time_car_set
    __swig_getmethods__["time_car"] = _mumoro.Test_config_time_car_get
    if _newclass:time_car = _swig_property(_mumoro.Test_config_time_car_get, _mumoro.Test_config_time_car_set)
    __swig_setmethods__["time_foot"] = _mumoro.Test_config_time_foot_set
    __swig_getmethods__["time_foot"] = _mumoro.Test_config_time_foot_get
    if _newclass:time_foot = _swig_property(_mumoro.Test_config_time_foot_get, _mumoro.Test_config_time_foot_set)
    __swig_setmethods__["limit_car"] = _mumoro.Test_config_limit_car_set
    __swig_getmethods__["limit_car"] = _mumoro.Test_config_limit_car_get
    if _newclass:limit_car = _swig_property(_mumoro.Test_config_limit_car_get, _mumoro.Test_config_limit_car_set)
    __swig_setmethods__["limit_foot"] = _mumoro.Test_config_limit_foot_set
    __swig_getmethods__["limit_foot"] = _mumoro.Test_config_limit_foot_get
    if _newclass:limit_foot = _swig_property(_mumoro.Test_config_limit_foot_get, _mumoro.Test_config_limit_foot_set)
    __swig_setmethods__["number_of_scenarios"] = _mumoro.Test_config_number_of_scenarios_set
    __swig_getmethods__["number_of_scenarios"] = _mumoro.Test_config_number_of_scenarios_get
    if _newclass:number_of_scenarios = _swig_property(_mumoro.Test_config_number_of_scenarios_get, _mumoro.Test_config_number_of_scenarios_set)
    def __init__(self): 
        this = _mumoro.new_Test_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Test_config
    __del__ = lambda self : None;
Test_config_swigregister = _mumoro.Test_config_swigregister
Test_config_swigregister(Test_config)

class Five_cost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Five_cost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Five_cost, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len_car_pickup"] = _mumoro.Five_cost_len_car_pickup_set
    __swig_getmethods__["len_car_pickup"] = _mumoro.Five_cost_len_car_pickup_get
    if _newclass:len_car_pickup = _swig_property(_mumoro.Five_cost_len_car_pickup_get, _mumoro.Five_cost_len_car_pickup_set)
    __swig_setmethods__["len_foot_pickup"] = _mumoro.Five_cost_len_foot_pickup_set
    __swig_getmethods__["len_foot_pickup"] = _mumoro.Five_cost_len_foot_pickup_get
    if _newclass:len_foot_pickup = _swig_property(_mumoro.Five_cost_len_foot_pickup_get, _mumoro.Five_cost_len_foot_pickup_set)
    __swig_setmethods__["len_shared_path"] = _mumoro.Five_cost_len_shared_path_set
    __swig_getmethods__["len_shared_path"] = _mumoro.Five_cost_len_shared_path_get
    if _newclass:len_shared_path = _swig_property(_mumoro.Five_cost_len_shared_path_get, _mumoro.Five_cost_len_shared_path_set)
    __swig_setmethods__["len_car_dropoff"] = _mumoro.Five_cost_len_car_dropoff_set
    __swig_getmethods__["len_car_dropoff"] = _mumoro.Five_cost_len_car_dropoff_get
    if _newclass:len_car_dropoff = _swig_property(_mumoro.Five_cost_len_car_dropoff_get, _mumoro.Five_cost_len_car_dropoff_set)
    __swig_setmethods__["len_foot_dropoff"] = _mumoro.Five_cost_len_foot_dropoff_set
    __swig_getmethods__["len_foot_dropoff"] = _mumoro.Five_cost_len_foot_dropoff_get
    if _newclass:len_foot_dropoff = _swig_property(_mumoro.Five_cost_len_foot_dropoff_get, _mumoro.Five_cost_len_foot_dropoff_set)
    __swig_setmethods__["wait_time"] = _mumoro.Five_cost_wait_time_set
    __swig_getmethods__["wait_time"] = _mumoro.Five_cost_wait_time_get
    if _newclass:wait_time = _swig_property(_mumoro.Five_cost_wait_time_get, _mumoro.Five_cost_wait_time_set)
    __swig_setmethods__["total_cost"] = _mumoro.Five_cost_total_cost_set
    __swig_getmethods__["total_cost"] = _mumoro.Five_cost_total_cost_get
    if _newclass:total_cost = _swig_property(_mumoro.Five_cost_total_cost_get, _mumoro.Five_cost_total_cost_set)
    def __init__(self): 
        this = _mumoro.new_Five_cost()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Five_cost
    __del__ = lambda self : None;
Five_cost_swigregister = _mumoro.Five_cost_swigregister
Five_cost_swigregister(Five_cost)

class Positions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Positions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Positions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["car_start_long"] = _mumoro.Positions_car_start_long_set
    __swig_getmethods__["car_start_long"] = _mumoro.Positions_car_start_long_get
    if _newclass:car_start_long = _swig_property(_mumoro.Positions_car_start_long_get, _mumoro.Positions_car_start_long_set)
    __swig_setmethods__["car_start_lat"] = _mumoro.Positions_car_start_lat_set
    __swig_getmethods__["car_start_lat"] = _mumoro.Positions_car_start_lat_get
    if _newclass:car_start_lat = _swig_property(_mumoro.Positions_car_start_lat_get, _mumoro.Positions_car_start_lat_set)
    __swig_setmethods__["car_end_long"] = _mumoro.Positions_car_end_long_set
    __swig_getmethods__["car_end_long"] = _mumoro.Positions_car_end_long_get
    if _newclass:car_end_long = _swig_property(_mumoro.Positions_car_end_long_get, _mumoro.Positions_car_end_long_set)
    __swig_setmethods__["car_end_lat"] = _mumoro.Positions_car_end_lat_set
    __swig_getmethods__["car_end_lat"] = _mumoro.Positions_car_end_lat_get
    if _newclass:car_end_lat = _swig_property(_mumoro.Positions_car_end_lat_get, _mumoro.Positions_car_end_lat_set)
    __swig_setmethods__["foot_start_long"] = _mumoro.Positions_foot_start_long_set
    __swig_getmethods__["foot_start_long"] = _mumoro.Positions_foot_start_long_get
    if _newclass:foot_start_long = _swig_property(_mumoro.Positions_foot_start_long_get, _mumoro.Positions_foot_start_long_set)
    __swig_setmethods__["foot_start_lat"] = _mumoro.Positions_foot_start_lat_set
    __swig_getmethods__["foot_start_lat"] = _mumoro.Positions_foot_start_lat_get
    if _newclass:foot_start_lat = _swig_property(_mumoro.Positions_foot_start_lat_get, _mumoro.Positions_foot_start_lat_set)
    __swig_setmethods__["foot_end_long"] = _mumoro.Positions_foot_end_long_set
    __swig_getmethods__["foot_end_long"] = _mumoro.Positions_foot_end_long_get
    if _newclass:foot_end_long = _swig_property(_mumoro.Positions_foot_end_long_get, _mumoro.Positions_foot_end_long_set)
    __swig_setmethods__["foot_end_lat"] = _mumoro.Positions_foot_end_lat_set
    __swig_getmethods__["foot_end_lat"] = _mumoro.Positions_foot_end_lat_get
    if _newclass:foot_end_lat = _swig_property(_mumoro.Positions_foot_end_lat_get, _mumoro.Positions_foot_end_lat_set)
    __swig_setmethods__["pickup_long"] = _mumoro.Positions_pickup_long_set
    __swig_getmethods__["pickup_long"] = _mumoro.Positions_pickup_long_get
    if _newclass:pickup_long = _swig_property(_mumoro.Positions_pickup_long_get, _mumoro.Positions_pickup_long_set)
    __swig_setmethods__["pickup_lat"] = _mumoro.Positions_pickup_lat_set
    __swig_getmethods__["pickup_lat"] = _mumoro.Positions_pickup_lat_get
    if _newclass:pickup_lat = _swig_property(_mumoro.Positions_pickup_lat_get, _mumoro.Positions_pickup_lat_set)
    __swig_setmethods__["dropoff_long"] = _mumoro.Positions_dropoff_long_set
    __swig_getmethods__["dropoff_long"] = _mumoro.Positions_dropoff_long_get
    if _newclass:dropoff_long = _swig_property(_mumoro.Positions_dropoff_long_get, _mumoro.Positions_dropoff_long_set)
    __swig_setmethods__["dropoff_lat"] = _mumoro.Positions_dropoff_lat_set
    __swig_getmethods__["dropoff_lat"] = _mumoro.Positions_dropoff_lat_get
    if _newclass:dropoff_lat = _swig_property(_mumoro.Positions_dropoff_lat_get, _mumoro.Positions_dropoff_lat_set)
    def __init__(self): 
        this = _mumoro.new_Positions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Positions
    __del__ = lambda self : None;
Positions_swigregister = _mumoro.Positions_swigregister
Positions_swigregister(Positions)

class Test_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scenario_id"] = _mumoro.Test_output_scenario_id_set
    __swig_getmethods__["scenario_id"] = _mumoro.Test_output_scenario_id_get
    if _newclass:scenario_id = _swig_property(_mumoro.Test_output_scenario_id_get, _mumoro.Test_output_scenario_id_set)
    __swig_setmethods__["car_start"] = _mumoro.Test_output_car_start_set
    __swig_getmethods__["car_start"] = _mumoro.Test_output_car_start_get
    if _newclass:car_start = _swig_property(_mumoro.Test_output_car_start_get, _mumoro.Test_output_car_start_set)
    __swig_setmethods__["car_end"] = _mumoro.Test_output_car_end_set
    __swig_getmethods__["car_end"] = _mumoro.Test_output_car_end_get
    if _newclass:car_end = _swig_property(_mumoro.Test_output_car_end_get, _mumoro.Test_output_car_end_set)
    __swig_setmethods__["foot_start"] = _mumoro.Test_output_foot_start_set
    __swig_getmethods__["foot_start"] = _mumoro.Test_output_foot_start_get
    if _newclass:foot_start = _swig_property(_mumoro.Test_output_foot_start_get, _mumoro.Test_output_foot_start_set)
    __swig_setmethods__["foot_end"] = _mumoro.Test_output_foot_end_set
    __swig_getmethods__["foot_end"] = _mumoro.Test_output_foot_end_get
    if _newclass:foot_end = _swig_property(_mumoro.Test_output_foot_end_get, _mumoro.Test_output_foot_end_set)
    __swig_setmethods__["cd_pickup"] = _mumoro.Test_output_cd_pickup_set
    __swig_getmethods__["cd_pickup"] = _mumoro.Test_output_cd_pickup_get
    if _newclass:cd_pickup = _swig_property(_mumoro.Test_output_cd_pickup_get, _mumoro.Test_output_cd_pickup_set)
    __swig_setmethods__["cd_dropoff"] = _mumoro.Test_output_cd_dropoff_set
    __swig_getmethods__["cd_dropoff"] = _mumoro.Test_output_cd_dropoff_get
    if _newclass:cd_dropoff = _swig_property(_mumoro.Test_output_cd_dropoff_get, _mumoro.Test_output_cd_dropoff_set)
    __swig_setmethods__["cc_pickup"] = _mumoro.Test_output_cc_pickup_set
    __swig_getmethods__["cc_pickup"] = _mumoro.Test_output_cc_pickup_get
    if _newclass:cc_pickup = _swig_property(_mumoro.Test_output_cc_pickup_get, _mumoro.Test_output_cc_pickup_set)
    __swig_setmethods__["cc_dropoff"] = _mumoro.Test_output_cc_dropoff_set
    __swig_getmethods__["cc_dropoff"] = _mumoro.Test_output_cc_dropoff_get
    if _newclass:cc_dropoff = _swig_property(_mumoro.Test_output_cc_dropoff_get, _mumoro.Test_output_cc_dropoff_set)
    __swig_setmethods__["pickup_foot_size"] = _mumoro.Test_output_pickup_foot_size_set
    __swig_getmethods__["pickup_foot_size"] = _mumoro.Test_output_pickup_foot_size_get
    if _newclass:pickup_foot_size = _swig_property(_mumoro.Test_output_pickup_foot_size_get, _mumoro.Test_output_pickup_foot_size_set)
    __swig_setmethods__["pickup_car_size"] = _mumoro.Test_output_pickup_car_size_set
    __swig_getmethods__["pickup_car_size"] = _mumoro.Test_output_pickup_car_size_get
    if _newclass:pickup_car_size = _swig_property(_mumoro.Test_output_pickup_car_size_get, _mumoro.Test_output_pickup_car_size_set)
    __swig_setmethods__["dropoff_foot_size"] = _mumoro.Test_output_dropoff_foot_size_set
    __swig_getmethods__["dropoff_foot_size"] = _mumoro.Test_output_dropoff_foot_size_get
    if _newclass:dropoff_foot_size = _swig_property(_mumoro.Test_output_dropoff_foot_size_get, _mumoro.Test_output_dropoff_foot_size_set)
    __swig_setmethods__["dropoff_car_size"] = _mumoro.Test_output_dropoff_car_size_set
    __swig_getmethods__["dropoff_car_size"] = _mumoro.Test_output_dropoff_car_size_get
    if _newclass:dropoff_car_size = _swig_property(_mumoro.Test_output_dropoff_car_size_get, _mumoro.Test_output_dropoff_car_size_set)
    __swig_setmethods__["psi_pickup_size"] = _mumoro.Test_output_psi_pickup_size_set
    __swig_getmethods__["psi_pickup_size"] = _mumoro.Test_output_psi_pickup_size_get
    if _newclass:psi_pickup_size = _swig_property(_mumoro.Test_output_psi_pickup_size_get, _mumoro.Test_output_psi_pickup_size_set)
    __swig_setmethods__["psi_dropoff_size"] = _mumoro.Test_output_psi_dropoff_size_set
    __swig_getmethods__["psi_dropoff_size"] = _mumoro.Test_output_psi_dropoff_size_get
    if _newclass:psi_dropoff_size = _swig_property(_mumoro.Test_output_psi_dropoff_size_get, _mumoro.Test_output_psi_dropoff_size_set)
    __swig_setmethods__["shared_path_size"] = _mumoro.Test_output_shared_path_size_set
    __swig_getmethods__["shared_path_size"] = _mumoro.Test_output_shared_path_size_get
    if _newclass:shared_path_size = _swig_property(_mumoro.Test_output_shared_path_size_get, _mumoro.Test_output_shared_path_size_set)
    __swig_setmethods__["iso_foot_pickup_time"] = _mumoro.Test_output_iso_foot_pickup_time_set
    __swig_getmethods__["iso_foot_pickup_time"] = _mumoro.Test_output_iso_foot_pickup_time_get
    if _newclass:iso_foot_pickup_time = _swig_property(_mumoro.Test_output_iso_foot_pickup_time_get, _mumoro.Test_output_iso_foot_pickup_time_set)
    __swig_setmethods__["iso_foot_dropoff_time"] = _mumoro.Test_output_iso_foot_dropoff_time_set
    __swig_getmethods__["iso_foot_dropoff_time"] = _mumoro.Test_output_iso_foot_dropoff_time_get
    if _newclass:iso_foot_dropoff_time = _swig_property(_mumoro.Test_output_iso_foot_dropoff_time_get, _mumoro.Test_output_iso_foot_dropoff_time_set)
    __swig_setmethods__["iso_car_pickup_time"] = _mumoro.Test_output_iso_car_pickup_time_set
    __swig_getmethods__["iso_car_pickup_time"] = _mumoro.Test_output_iso_car_pickup_time_get
    if _newclass:iso_car_pickup_time = _swig_property(_mumoro.Test_output_iso_car_pickup_time_get, _mumoro.Test_output_iso_car_pickup_time_set)
    __swig_setmethods__["iso_car_dropoff_time"] = _mumoro.Test_output_iso_car_dropoff_time_set
    __swig_getmethods__["iso_car_dropoff_time"] = _mumoro.Test_output_iso_car_dropoff_time_get
    if _newclass:iso_car_dropoff_time = _swig_property(_mumoro.Test_output_iso_car_dropoff_time_get, _mumoro.Test_output_iso_car_dropoff_time_set)
    __swig_setmethods__["psi_pickup_time"] = _mumoro.Test_output_psi_pickup_time_set
    __swig_getmethods__["psi_pickup_time"] = _mumoro.Test_output_psi_pickup_time_get
    if _newclass:psi_pickup_time = _swig_property(_mumoro.Test_output_psi_pickup_time_get, _mumoro.Test_output_psi_pickup_time_set)
    __swig_setmethods__["psi_dropoff_time"] = _mumoro.Test_output_psi_dropoff_time_set
    __swig_getmethods__["psi_dropoff_time"] = _mumoro.Test_output_psi_dropoff_time_get
    if _newclass:psi_dropoff_time = _swig_property(_mumoro.Test_output_psi_dropoff_time_get, _mumoro.Test_output_psi_dropoff_time_set)
    __swig_setmethods__["path_computing_time"] = _mumoro.Test_output_path_computing_time_set
    __swig_getmethods__["path_computing_time"] = _mumoro.Test_output_path_computing_time_get
    if _newclass:path_computing_time = _swig_property(_mumoro.Test_output_path_computing_time_get, _mumoro.Test_output_path_computing_time_set)
    __swig_setmethods__["path_ordering_foot_time"] = _mumoro.Test_output_path_ordering_foot_time_set
    __swig_getmethods__["path_ordering_foot_time"] = _mumoro.Test_output_path_ordering_foot_time_get
    if _newclass:path_ordering_foot_time = _swig_property(_mumoro.Test_output_path_ordering_foot_time_get, _mumoro.Test_output_path_ordering_foot_time_set)
    __swig_setmethods__["path_ordering_car_time"] = _mumoro.Test_output_path_ordering_car_time_set
    __swig_getmethods__["path_ordering_car_time"] = _mumoro.Test_output_path_ordering_car_time_get
    if _newclass:path_ordering_car_time = _swig_property(_mumoro.Test_output_path_ordering_car_time_get, _mumoro.Test_output_path_ordering_car_time_set)
    __swig_setmethods__["path_election_time"] = _mumoro.Test_output_path_election_time_set
    __swig_getmethods__["path_election_time"] = _mumoro.Test_output_path_election_time_get
    if _newclass:path_election_time = _swig_property(_mumoro.Test_output_path_election_time_get, _mumoro.Test_output_path_election_time_set)
    __swig_setmethods__["cd_time"] = _mumoro.Test_output_cd_time_set
    __swig_getmethods__["cd_time"] = _mumoro.Test_output_cd_time_get
    if _newclass:cd_time = _swig_property(_mumoro.Test_output_cd_time_get, _mumoro.Test_output_cd_time_set)
    __swig_setmethods__["cc_time"] = _mumoro.Test_output_cc_time_set
    __swig_getmethods__["cc_time"] = _mumoro.Test_output_cc_time_get
    if _newclass:cc_time = _swig_property(_mumoro.Test_output_cc_time_get, _mumoro.Test_output_cc_time_set)
    __swig_setmethods__["cd_costs"] = _mumoro.Test_output_cd_costs_set
    __swig_getmethods__["cd_costs"] = _mumoro.Test_output_cd_costs_get
    if _newclass:cd_costs = _swig_property(_mumoro.Test_output_cd_costs_get, _mumoro.Test_output_cd_costs_set)
    __swig_setmethods__["cc_costs"] = _mumoro.Test_output_cc_costs_set
    __swig_getmethods__["cc_costs"] = _mumoro.Test_output_cc_costs_get
    if _newclass:cc_costs = _swig_property(_mumoro.Test_output_cc_costs_get, _mumoro.Test_output_cc_costs_set)
    __swig_setmethods__["cd_positions"] = _mumoro.Test_output_cd_positions_set
    __swig_getmethods__["cd_positions"] = _mumoro.Test_output_cd_positions_get
    if _newclass:cd_positions = _swig_property(_mumoro.Test_output_cd_positions_get, _mumoro.Test_output_cd_positions_set)
    __swig_setmethods__["cc_positions"] = _mumoro.Test_output_cc_positions_set
    __swig_getmethods__["cc_positions"] = _mumoro.Test_output_cc_positions_get
    if _newclass:cc_positions = _swig_property(_mumoro.Test_output_cc_positions_get, _mumoro.Test_output_cc_positions_set)
    __swig_setmethods__["input"] = _mumoro.Test_output_input_set
    __swig_getmethods__["input"] = _mumoro.Test_output_input_get
    if _newclass:input = _swig_property(_mumoro.Test_output_input_get, _mumoro.Test_output_input_set)
    def __init__(self): 
        this = _mumoro.new_Test_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Test_output
    __del__ = lambda self : None;
Test_output_swigregister = _mumoro.Test_output_swigregister
Test_output_swigregister(Test_output)

class cc_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cc_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cc_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cc_pickup"] = _mumoro.cc_output_cc_pickup_set
    __swig_getmethods__["cc_pickup"] = _mumoro.cc_output_cc_pickup_get
    if _newclass:cc_pickup = _swig_property(_mumoro.cc_output_cc_pickup_get, _mumoro.cc_output_cc_pickup_set)
    __swig_setmethods__["cc_dropoff"] = _mumoro.cc_output_cc_dropoff_set
    __swig_getmethods__["cc_dropoff"] = _mumoro.cc_output_cc_dropoff_get
    if _newclass:cc_dropoff = _swig_property(_mumoro.cc_output_cc_dropoff_get, _mumoro.cc_output_cc_dropoff_set)
    __swig_setmethods__["cc_time"] = _mumoro.cc_output_cc_time_set
    __swig_getmethods__["cc_time"] = _mumoro.cc_output_cc_time_get
    if _newclass:cc_time = _swig_property(_mumoro.cc_output_cc_time_get, _mumoro.cc_output_cc_time_set)
    __swig_setmethods__["cc_costs"] = _mumoro.cc_output_cc_costs_set
    __swig_getmethods__["cc_costs"] = _mumoro.cc_output_cc_costs_get
    if _newclass:cc_costs = _swig_property(_mumoro.cc_output_cc_costs_get, _mumoro.cc_output_cc_costs_set)
    __swig_setmethods__["cc_positions"] = _mumoro.cc_output_cc_positions_set
    __swig_getmethods__["cc_positions"] = _mumoro.cc_output_cc_positions_get
    if _newclass:cc_positions = _swig_property(_mumoro.cc_output_cc_positions_get, _mumoro.cc_output_cc_positions_set)
    def __init__(self): 
        this = _mumoro.new_cc_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_cc_output
    __del__ = lambda self : None;
cc_output_swigregister = _mumoro.cc_output_swigregister
cc_output_swigregister(cc_output)

class BiList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PickUp"] = _mumoro.BiList_PickUp_set
    __swig_getmethods__["PickUp"] = _mumoro.BiList_PickUp_get
    if _newclass:PickUp = _swig_property(_mumoro.BiList_PickUp_get, _mumoro.BiList_PickUp_set)
    __swig_setmethods__["DropOff"] = _mumoro.BiList_DropOff_set
    __swig_getmethods__["DropOff"] = _mumoro.BiList_DropOff_get
    if _newclass:DropOff = _swig_property(_mumoro.BiList_DropOff_get, _mumoro.BiList_DropOff_set)
    def __init__(self): 
        this = _mumoro.new_BiList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_BiList
    __del__ = lambda self : None;
BiList_swigregister = _mumoro.BiList_swigregister
BiList_swigregister(BiList)


def getData(*args):
  return _mumoro.getData(*args)
getData = _mumoro.getData

def getPref(*args):
  return _mumoro.getPref(*args)
getPref = _mumoro.getPref

def compare_cost(*args):
  return _mumoro.compare_cost(*args)
compare_cost = _mumoro.compare_cost

def compare_pref(*args):
  return _mumoro.compare_pref(*args)
compare_pref = _mumoro.compare_pref
class Driver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Driver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Driver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["posStart"] = _mumoro.Driver_posStart_set
    __swig_getmethods__["posStart"] = _mumoro.Driver_posStart_get
    if _newclass:posStart = _swig_property(_mumoro.Driver_posStart_get, _mumoro.Driver_posStart_set)
    __swig_setmethods__["posEnd"] = _mumoro.Driver_posEnd_set
    __swig_getmethods__["posEnd"] = _mumoro.Driver_posEnd_get
    if _newclass:posEnd = _swig_property(_mumoro.Driver_posEnd_get, _mumoro.Driver_posEnd_set)
    __swig_setmethods__["data_before"] = _mumoro.Driver_data_before_set
    __swig_getmethods__["data_before"] = _mumoro.Driver_data_before_get
    if _newclass:data_before = _swig_property(_mumoro.Driver_data_before_get, _mumoro.Driver_data_before_set)
    __swig_setmethods__["data_after"] = _mumoro.Driver_data_after_set
    __swig_getmethods__["data_after"] = _mumoro.Driver_data_after_get
    if _newclass:data_after = _swig_property(_mumoro.Driver_data_after_get, _mumoro.Driver_data_after_set)
    __swig_setmethods__["favorites"] = _mumoro.Driver_favorites_set
    __swig_getmethods__["favorites"] = _mumoro.Driver_favorites_get
    if _newclass:favorites = _swig_property(_mumoro.Driver_favorites_get, _mumoro.Driver_favorites_set)
    def __init__(self, *args): 
        this = _mumoro.new_Driver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Driver
    __del__ = lambda self : None;
    def getNodeOnly(self): return _mumoro.Driver_getNodeOnly(self)
    def getPickup(self): return _mumoro.Driver_getPickup(self)
    def getDropoff(self): return _mumoro.Driver_getDropoff(self)
    def findZ(self, *args): return _mumoro.Driver_findZ(self, *args)
    def findPickup(self, *args): return _mumoro.Driver_findPickup(self, *args)
    def findDropoff(self, *args): return _mumoro.Driver_findDropoff(self, *args)
    def ProcessTotalCost(self, *args): return _mumoro.Driver_ProcessTotalCost(self, *args)
    def getFavorites(self, *args): return _mumoro.Driver_getFavorites(self, *args)
Driver_swigregister = _mumoro.Driver_swigregister
Driver_swigregister(Driver)

class Pedestrian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pedestrian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pedestrian, name)
    __repr__ = _swig_repr
    __swig_setmethods__["posStart"] = _mumoro.Pedestrian_posStart_set
    __swig_getmethods__["posStart"] = _mumoro.Pedestrian_posStart_get
    if _newclass:posStart = _swig_property(_mumoro.Pedestrian_posStart_get, _mumoro.Pedestrian_posStart_set)
    __swig_setmethods__["posEnd"] = _mumoro.Pedestrian_posEnd_set
    __swig_getmethods__["posEnd"] = _mumoro.Pedestrian_posEnd_get
    if _newclass:posEnd = _swig_property(_mumoro.Pedestrian_posEnd_get, _mumoro.Pedestrian_posEnd_set)
    __swig_setmethods__["data_before"] = _mumoro.Pedestrian_data_before_set
    __swig_getmethods__["data_before"] = _mumoro.Pedestrian_data_before_get
    if _newclass:data_before = _swig_property(_mumoro.Pedestrian_data_before_get, _mumoro.Pedestrian_data_before_set)
    __swig_setmethods__["data_after"] = _mumoro.Pedestrian_data_after_set
    __swig_getmethods__["data_after"] = _mumoro.Pedestrian_data_after_get
    if _newclass:data_after = _swig_property(_mumoro.Pedestrian_data_after_get, _mumoro.Pedestrian_data_after_set)
    __swig_setmethods__["favorites"] = _mumoro.Pedestrian_favorites_set
    __swig_getmethods__["favorites"] = _mumoro.Pedestrian_favorites_get
    if _newclass:favorites = _swig_property(_mumoro.Pedestrian_favorites_get, _mumoro.Pedestrian_favorites_set)
    def __init__(self, *args): 
        this = _mumoro.new_Pedestrian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Pedestrian
    __del__ = lambda self : None;
    def getNodeOnly(self): return _mumoro.Pedestrian_getNodeOnly(self)
    def getPickup(self): return _mumoro.Pedestrian_getPickup(self)
    def getDropoff(self): return _mumoro.Pedestrian_getDropoff(self)
    def findZ(self, *args): return _mumoro.Pedestrian_findZ(self, *args)
    def findPickup(self, *args): return _mumoro.Pedestrian_findPickup(self, *args)
    def findDropoff(self, *args): return _mumoro.Pedestrian_findDropoff(self, *args)
    def ProcessTotalCost(self, *args): return _mumoro.Pedestrian_ProcessTotalCost(self, *args)
    def getFavorites(self, *args): return _mumoro.Pedestrian_getFavorites(self, *args)
Pedestrian_swigregister = _mumoro.Pedestrian_swigregister
Pedestrian_swigregister(Pedestrian)

class Manager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Manager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Manager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shared_path"] = _mumoro.Manager_shared_path_set
    __swig_getmethods__["shared_path"] = _mumoro.Manager_shared_path_get
    if _newclass:shared_path = _swig_property(_mumoro.Manager_shared_path_get, _mumoro.Manager_shared_path_set)
    __swig_setmethods__["matching"] = _mumoro.Manager_matching_set
    __swig_getmethods__["matching"] = _mumoro.Manager_matching_get
    if _newclass:matching = _swig_property(_mumoro.Manager_matching_get, _mumoro.Manager_matching_set)
    def __init__(self): 
        this = _mumoro.new_Manager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Manager
    __del__ = lambda self : None;
    def checker(self, *args): return _mumoro.Manager_checker(self, *args)
    def PSI(self, *args): return _mumoro.Manager_PSI(self, *args)
    def PSI_Pickup(self, *args): return _mumoro.Manager_PSI_Pickup(self, *args)
    def PSI_Dropoff(self, *args): return _mumoro.Manager_PSI_Dropoff(self, *args)
    def getPSI(self, *args): return _mumoro.Manager_getPSI(self, *args)
    def not_empty(self, *args): return _mumoro.Manager_not_empty(self, *args)
    def GetAllPath(self, *args): return _mumoro.Manager_GetAllPath(self, *args)
    def match(self, *args): return _mumoro.Manager_match(self, *args)
    def match_2(self, *args): return _mumoro.Manager_match_2(self, *args)
    def shared_path_len(self): return _mumoro.Manager_shared_path_len(self)
    def getPathById(self, *args): return _mumoro.Manager_getPathById(self, *args)
    def getThePath(self): return _mumoro.Manager_getThePath(self)
Manager_swigregister = _mumoro.Manager_swigregister
Manager_swigregister(Manager)

class Toolbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Toolbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Toolbox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_Toolbox()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Toolbox
    __del__ = lambda self : None;
    def rgenerator(self, *args): return _mumoro.Toolbox_rgenerator(self, *args)
    def synchro(self, *args): return _mumoro.Toolbox_synchro(self, *args)
    def synchro_area(self, *args): return _mumoro.Toolbox_synchro_area(self, *args)
    def satellites(self, *args): return _mumoro.Toolbox_satellites(self, *args)
    def satellites_free(self, *args): return _mumoro.Toolbox_satellites_free(self, *args)
    def get_satellite(self, *args): return _mumoro.Toolbox_get_satellite(self, *args)
    def cd_carpooling_positions(self, *args): return _mumoro.Toolbox_cd_carpooling_positions(self, *args)
    def cd_costs(self, *args): return _mumoro.Toolbox_cd_costs(self, *args)
    def cc_carpooling_test(self, *args): return _mumoro.Toolbox_cc_carpooling_test(self, *args)
    def test_loader(self, *args): return _mumoro.Toolbox_test_loader(self, *args)
    def create_result_file(self, *args): return _mumoro.Toolbox_create_result_file(self, *args)
    def save_all(self, *args): return _mumoro.Toolbox_save_all(self, *args)
    def test_cd(self): return _mumoro.Toolbox_test_cd(self)
Toolbox_swigregister = _mumoro.Toolbox_swigregister
Toolbox_swigregister(Toolbox)


def isochrone(*args):
  return _mumoro.isochrone(*args)
isochrone = _mumoro.isochrone
class my_isochrone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, my_isochrone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, my_isochrone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ns"] = _mumoro.my_isochrone_ns_set
    __swig_getmethods__["ns"] = _mumoro.my_isochrone_ns_get
    if _newclass:ns = _swig_property(_mumoro.my_isochrone_ns_get, _mumoro.my_isochrone_ns_set)
    __swig_setmethods__["costs"] = _mumoro.my_isochrone_costs_set
    __swig_getmethods__["costs"] = _mumoro.my_isochrone_costs_get
    if _newclass:costs = _swig_property(_mumoro.my_isochrone_costs_get, _mumoro.my_isochrone_costs_set)
    def __init__(self): 
        this = _mumoro.new_my_isochrone()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_my_isochrone
    __del__ = lambda self : None;
my_isochrone_swigregister = _mumoro.my_isochrone_swigregister
my_isochrone_swigregister(my_isochrone)


def cool_iso(*args):
  return _mumoro.cool_iso(*args)
cool_iso = _mumoro.cool_iso

def show_isochrone(*args):
  return _mumoro.show_isochrone(*args)
show_isochrone = _mumoro.show_isochrone

def rectangle_containing(*args):
  return _mumoro.rectangle_containing(*args)
rectangle_containing = _mumoro.rectangle_containing

def bordeaux_bb(*args):
  return _mumoro.bordeaux_bb(*args)
bordeaux_bb = _mumoro.bordeaux_bb

def toulouse_bb(*args):
  return _mumoro.toulouse_bb(*args)
toulouse_bb = _mumoro.toulouse_bb
class Area(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodes"] = _mumoro.Area_nodes_set
    __swig_getmethods__["nodes"] = _mumoro.Area_nodes_get
    if _newclass:nodes = _swig_property(_mumoro.Area_nodes_get, _mumoro.Area_nodes_set)
    __swig_setmethods__["ns"] = _mumoro.Area_ns_set
    __swig_getmethods__["ns"] = _mumoro.Area_ns_get
    if _newclass:ns = _swig_property(_mumoro.Area_ns_get, _mumoro.Area_ns_set)
    __swig_setmethods__["bb"] = _mumoro.Area_bb_set
    __swig_getmethods__["bb"] = _mumoro.Area_bb_get
    if _newclass:bb = _swig_property(_mumoro.Area_bb_get, _mumoro.Area_bb_set)
    __swig_setmethods__["g"] = _mumoro.Area_g_set
    __swig_getmethods__["g"] = _mumoro.Area_g_get
    if _newclass:g = _swig_property(_mumoro.Area_g_get, _mumoro.Area_g_set)
    __swig_setmethods__["num_car_accessible"] = _mumoro.Area_num_car_accessible_set
    __swig_getmethods__["num_car_accessible"] = _mumoro.Area_num_car_accessible_get
    if _newclass:num_car_accessible = _swig_property(_mumoro.Area_num_car_accessible_get, _mumoro.Area_num_car_accessible_set)
    __swig_setmethods__["id"] = _mumoro.Area_id_set
    __swig_getmethods__["id"] = _mumoro.Area_id_get
    if _newclass:id = _swig_property(_mumoro.Area_id_get, _mumoro.Area_id_set)
    def __init__(self, *args): 
        this = _mumoro.new_Area(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Area
    __del__ = lambda self : None;
    def add_node(self, *args): return _mumoro.Area_add_node(self, *args)
    def size(self): return _mumoro.Area_size(self)
    def get(self, *args): return _mumoro.Area_get(self, *args)
    def get_nodes(self): return _mumoro.Area_get_nodes(self)
    def isIn(self, *args): return _mumoro.Area_isIn(self, *args)
    def geo_filter(self): return _mumoro.Area_geo_filter(self)
    def init(self): return _mumoro.Area_init(self)
    def get_res(self): return _mumoro.Area_get_res(self)
Area_swigregister = _mumoro.Area_swigregister
Area_swigregister(Area)


def build_area_around(*args):
  return _mumoro.build_area_around(*args)
build_area_around = _mumoro.build_area_around

def build_area_around_with_start_time(*args):
  return _mumoro.build_area_around_with_start_time(*args)
build_area_around_with_start_time = _mumoro.build_area_around_with_start_time

def toulouse_area(*args):
  return _mumoro.toulouse_area(*args)
toulouse_area = _mumoro.toulouse_area

def toulouse_area_small(*args):
  return _mumoro.toulouse_area_small(*args)
toulouse_area_small = _mumoro.toulouse_area_small

def bordeaux_area(*args):
  return _mumoro.bordeaux_area(*args)
bordeaux_area = _mumoro.bordeaux_area

def bordeaux_area_small(*args):
  return _mumoro.bordeaux_area_small(*args)
bordeaux_area_small = _mumoro.bordeaux_area_small

def point_to_point(*args):
  return _mumoro.point_to_point(*args)
point_to_point = _mumoro.point_to_point
class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_node"] = _mumoro.Path_start_node_set
    __swig_getmethods__["start_node"] = _mumoro.Path_start_node_get
    if _newclass:start_node = _swig_property(_mumoro.Path_start_node_get, _mumoro.Path_start_node_set)
    __swig_setmethods__["end_node"] = _mumoro.Path_end_node_set
    __swig_getmethods__["end_node"] = _mumoro.Path_end_node_get
    if _newclass:end_node = _swig_property(_mumoro.Path_end_node_get, _mumoro.Path_end_node_set)
    __swig_setmethods__["edges"] = _mumoro.Path_edges_set
    __swig_getmethods__["edges"] = _mumoro.Path_edges_get
    if _newclass:edges = _swig_property(_mumoro.Path_edges_get, _mumoro.Path_edges_set)
    def __init__(self): 
        this = _mumoro.new_Path()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Path
    __del__ = lambda self : None;
Path_swigregister = _mumoro.Path_swigregister
Path_swigregister(Path)

# This file is compatible with both classic and new-style classes.


